spring:
  profiles:
    active: prod,log
  jmx:
    enabled: false
  aop:
    proxy-target-class: true
  servlet:
    multipart:
      enabled: true
      max-file-size: 200MB
      max-request-size: 215MB

  # DB
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${POSTGRES_HOST:taco-db}:${POSTGRES_PORT:5432}/${POSTGRES_DB:registry}?useUnicode=true&characterEncoding=utf-8
    username: ${POSTGRES_USER:registry}
    password: ${POSTGRES_PASSWORD:registry1234$$}
    hikari:
      max-lifetime: 600000

# Security 설정
security:
  oauth2:
    # OAuth 서버 Client 정보
    client:
      client-id: registry
      client-secret: registry-secret
    resource:
      token-info-uri: http://localhost:8080/oauth/check_token
    auth-server-uri: http://localhost:8080/oauth/token
    keycloak:
      auth-server-uri: ${KEYCLOAK_AUTH_SERVER_URI:https://keycloak.skb-doj-dev01.btvpaas.com/auth}
      client-id: ${KEYCLOAK_CLIENT_ID:registry}
      realm: ${KEYCLOAK_REALM:nextpaas}
      adminUser: ${KEYCLOAK_ADMIN_USER:keycloak}
      adminPassword: ${KEYCLOAK_ADMIN_PASSWORD:ehdwkrxkzh1!}

# LOG 설정
logging:
  config: classpath:logback.xml

# WAS 설정
server:
  port: 8080
  servlet:
    session:
      timeout: 120m

# Config
config:
  builder:
    url: ${BUILDER_URL:'http://taco-registry-builder:4000'}
    username: builder
  minio:
    available: ${APP_MINIO_AVAILABLE:true}
  time-zone: ${APP_TIME_ZONE:'UTC'}
  registry:
    url: ${REGISTRY_URL:'taco-registry:5000'}
  file:
    upload_dir: /tmp/file
  oauth:
    jwt:
      issuer: ${REGISTRY_AUTH_ISSUER:taco-registry}
      key: classpath:registry.jks
      password: ${REGISTRY_AUTH_KEY_PASSWORD:taco-registry}
      key-pair-alias: ${REGISTRY_AUTH_KEY_PAIR_ALIAS:servercert}
      key-pair-password: ${REGISTRY_AUTH_KEY_PAIR_PASSWORD:taco-registry}

---
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Product Profile
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
spring:
  profiles: prod

  jpa:
    show-sql: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        jdbc:
          time_zone: ${APP_TIME_ZONE:'UTC'}
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        hbm2ddl:
          import_files: /sql/init.sql
---
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Product Create Profile
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
spring:
  profiles: prod-create

  jpa:
    show-sql: false
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        jdbc:
          time_zone: ${APP_TIME_ZONE:'UTC'}
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        hbm2ddl:
          import_files: /sql/init.sql
---
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Product Update Profile
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
spring:
  profiles: prod-update

  jpa:
    show-sql: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        jdbc:
          time_zone: ${APP_TIME_ZONE:'UTC'}
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        hbm2ddl:
          import_files: /sql/init.sql
---
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Log Profile
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
spring:
  profiles: log
  # JPA
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true

# LOG 설정
logging:
  config: classpath:logback-console.xml
---
